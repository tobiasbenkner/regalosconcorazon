{%- assign index = 0 -%}
{%- for block in section.blocks -%}

    <div id="dia-{{ index }}" class="page-width invisible">

        <div class="custom-center border-radius background-image"
             style='margin-top: 60px; height: 300px; background-image: url("{{ block.settings.background_image | img_url: '1200x1200' }}");'>
            <h1 class="shadow" style="color: white">{{ block.settings.title }}</h1>
        </div>

        <div class="center">
            {{ block.settings.description }}
        </div>

        <div>
            <a{% if block.settings.button_link == blank %} role="link" aria-disabled="true"{% else %} href="{{ block.settings.button_link }}"{% endif %} class="button{% if block.settings.button_style_secondary %} button--secondary{% else %} button--primary{% endif %}" {{ block.shopify_attributes }}>
                {{ block.settings.button_label | escape }}
            </a>
        </div>

    </div>

    {%- assign index = 0 | plus: 1 -%}
{%- endfor -%}


<script src="{{ 'moment.min.js' | asset_url }}"></script>
<script>

    function pad(num, size) {
        num = num.toString();
        while (num.length < size) num = "0" + num;
        return num;
    }

    function getFirstWeekDay(dateString, dayOfWeek) {
        if(dayOfWeek === -1) {
            return dateString;
        }

        const date = moment(dateString, "YYYY-MM-DD");

        const day = date.day();
        let diffDays;

        if (day > dayOfWeek) {
            diffDays = 7 - (day - dayOfWeek);
        } else {
            diffDays = dayOfWeek - day
        }

        return date.add(diffDays, 'day').format("YYYY-MM-DD");
    }

    function displayDia() {

        const entries = [];
        const daysBefore = -"{{ section.settings.days_before }}";

        {%- assign index = 0 -%}
        const year = moment().format("YYYY");

        {%- for block in section.blocks -%}
            entries.push({
                day: "{{ block.settings.start_day }}",
                month: "{{ block.settings.start_month }}",
                year: year,
                first_date: "{{ block.settings.first_day }}",
                index: "{{ index }}",
                days_before: daysBefore,
            });
            {%- assign index = 0 | plus: 1 -%}
        {%- endfor -%}

        const specialDays = entries.map(it => {
            const date = `${it.year}-${pad(it.month, 2)}-${pad(it.day, 2)}`;
            const endDate = getFirstWeekDay(date, it.first_date);
            const startDate = moment(endDate).add(it.days_before, "days").format("YYYY-MM-DD");

            return {
                index: it.index,
                end_date: endDate,
                start_date: startDate,
            }
        });


        const currentDate = moment().format("YYYY-MM-DD");
        const dias = specialDays.filter(it => it.start_date <= currentDate && it.end_date >= currentDate);

        if (dias.length === 0) {
            return;
        }

        for(let dia of dias) {
            const element = document.getElementById("dia-" + dia.index);
            element.classList.remove("invisible");
        }
    }

    displayDia();
  	
</script>

{% schema %}
  {
    "name": "custom-dia-especial",
    "settings": [{
        "type": "text",
        "id": "days_before",
        "label": "Days before",
        "default": "15"
    }],
	"blocks": [
	    {
          "type": "day",
          "name": "Day",
          "settings": [
            {
              "type": "image_picker",
              "id": "background_image",
              "label": "Background Image"
            },
            {
              "type": "text",
              "id": "title",
              "label": "Title"
            },
            {
                "type": "richtext",
                "id": "description",
                "default": "<p>Text...</p>",
                "label": "Description"
            },
            {
                "type": "range",
                "id": "start_month",
                "label": "Month",
                "min": 1,
                "max": 12,
                "step": 1,
                "default": 11
            },
            {
                "type": "range",
                "id": "start_day",
                "label": "Day",
                "min": 1,
                "max": 31,
                "step": 1,
                "default": 27
            },
            {
                "type": "select",
                "id": "first_day",
                "default": "-1",
                "label": "First day",
                "options": [
                    {
                        "value": "-1",
                        "label": "None"
                    },
                    {
                        "value": "1",
                        "label": "Monday"
                    },
                    {
                        "value": "2",
                        "label": "Tuesday"
                    },
                    {
                        "value": "3",
                        "label": "Wednesday"
                    },
                    {
                        "value": "4",
                        "label": "Thursday"
                    },
                    {
                        "value": "5",
                        "label": "Friday"
                    },
                    {
                    "value": "6",
                    "label": "Saturday"
                    },
                    {
                        "value": "0",
                        "label": "Sunday"
                    }
                ]
            },
            {
                "type": "text",
                "id": "button_label",
                "default": "Button label",
                "label": "Button Label"
            },
            {
                "type": "url",
                "id": "button_link",
                "label": "Button Link"
            }
          ]
    	}
	]
  }
{% endschema %}

{% stylesheet %}

.invisible {
	display: none;
}

.cde-grid-container {
    display: grid;
    grid-template-columns: auto auto auto auto;
    grid-gap: 20px;
	margin-top: 20px;
	margin-bottom: 60px;
}

.cde-grid-item {
    background-color: rgba(255, 255, 255, 1);
    border: 1px solid gray;
    text-align: center;
    font-size: 30px;
    padding: 10px;
    display: flex;
    border-radius: 10px;
}

@media screen and (max-width: 990px) {
  .cmm-grid-container {
  	grid-template-columns: auto auto;
  }
}


.background-image {
	background-position: center;
  	background-repeat: no-repeat;
  	background-size: cover;
}
.custom-center {
	display: flex;
    align-items: center;
    justify-content: center;
}


.border-radius {
	border-radius: 20px;
}
{% endstylesheet %}

{% javascript %}
	

{% endjavascript %}
